<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qiuxs.lq.auth.dao.UserDao"><!--dsName="" saasAspect=""-->
	<!-- <cache readOnly="true"/> -->
	<!-- 启用Redis缓存时去除下方注释 -->
	<!-- <cache eviction="LRU" type="com.qiuxs.tech.mybatis.cache.MybatisRedisCache" readOnly="true" /> -->
    <sql id="allFields">
		`id`,
		`login_id` as loginId,
		`password`,
		`name`,
		`phone`,
		`email`,
		`sign`,
		`status`,
		`created_date` as createdDate,
		`updated_date` as updatedDate
    </sql>
    
	<sql id="insertFields">
		`id`,
		`login_id`,
		`password`,
		`name`,
		`phone`,
		`email`,
		`sign`,
		`status`,
		`created_date`,
		`updated_date`
    </sql>
	
	<insert id="create" parameterType="com.qiuxs.lq.auth.entity.User">
		insert into lq_user (<include refid="insertFields"/>)
		values (
			#{id},
			#{loginId},
			#{password},
			#{name},
			#{phone},
			#{email},
			#{sign},
			#{status},
			#{createdDate},
			#{updatedDate}
		)
	</insert>
	
	<insert id="createInBatch" parameterType="com.qiuxs.lq.auth.entity.User">
		insert into lq_user (<include refid="insertFields"/>) values 
		<foreach collection="list" item="item" index="index" separator=",">
			(
				#{item.id},
				#{item.loginId},
				#{item.password},
				#{item.name},
				#{item.phone},
				#{item.email},
				#{item.sign},
				#{item.status},
				#{item.createdDate},
				#{item.updatedDate}
			)
		</foreach>
	</insert>   		
	
    <sql id="whereClause">
		<if test='loginId != null and loginId != ""'>
			and `login_id` = #{loginId}			
		</if>
		<if test='password != null and password != ""'>
			and `password` = #{password}			
		</if>
		<if test='name != null and name != ""'>
			and `name` = #{name}			
		</if>
		<if test="phone != null">
			and `phone` = #{phone}			
		</if>
		<if test='email != null and email != ""'>
			and `email` = #{email}			
		</if>
		<if test='sign != null and sign != ""'>
			and `sign` = #{sign}			
		</if>
		<if test="status != null">
			and `status` = #{status}			
		</if>
		<if test="statusGte != null">
			and `status` &gt;= #{statusGte}
		</if>
		<if test="statusGt != null">
			and `status` &gt; #{statusGt}
		</if>
		<if test="statusLte != null">
			and `status` &lt;= #{statusLte}
		</if>
		<if test="statusLt != null">
			and `status` &lt; #{statusLt}
		</if>
		<if test="createdDate != null">
			and `created_date` &gt;= #{createdDate}
			<!--and `created_date` &lt;= #{createdDate_fan1} -->
		</if>
		<if test="updatedDate != null">
			and `updated_date` = #{updatedDate}			
		</if>
	</sql>
    
	<select id="get" resultType="com.qiuxs.lq.auth.entity.User" parameterType="Long" >
		select <include refid="allFields"/> 
		  from lq_user 
		 where id = #{id} 
	</select>
	
	<select id="getByIds" parameterType="List" resultType="com.qiuxs.lq.auth.entity.User">
		select <include refid="allFields"/> from lq_user 
		where id in
		<foreach collection="list" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</select>
		
	<select id="getAll" resultType="com.qiuxs.lq.auth.entity.User">
		select <include refid="allFields"/> 
		from lq_user 
	</select>

	<select id="count" resultType="long">
		select count(*) from lq_user 
	</select>
	
	<select id="getCountByWhere" parameterType="Map" resultType="Long">
		select count(*) from lq_user 
		<where>
		    <include refid="whereClause"/>
		</where>
	</select>

	<select id="findByWhere" parameterType="Map" resultType="com.qiuxs.lq.auth.entity.User">
		select <include refid="allFields"/>
		from lq_user 
		<where>
		    <include refid="whereClause"/>
		</where>				
		<if test="orderBy != null">
			ORDER BY ${orderBy}
			<if test="orderByDesc != null and orderByDesc == 'true'">
				desc
			</if>
		</if>
	</select>
	
	<sql id="setComn">		
		<if test="loginId != null">
			`login_id` = #{loginId},
		</if>
		<if test="password != null">
			`password` = #{password},
		</if>
		<if test="name != null">
			`name` = #{name},
		</if>
		<if test="phone != null">
			`phone` = #{phone},
		</if>
		<if test="email != null">
			`email` = #{email},
		</if>
		<if test="sign != null">
			`sign` = #{sign},
		</if>
		<if test="status != null">
			`status` = #{status},
		</if>
		<if test="createdDate != null">
			`created_date` = #{createdDate},
		</if>
		<if test="updatedDate != null">
			`updated_date` = #{updatedDate}
		</if>
	</sql>
	
	<update id="update" parameterType="com.qiuxs.lq.auth.entity.User">
		 update lq_user 
		    <set>
		    	<include refid="setComn"/>
			</set>
		  where id = #{id}
	</update>
	
	<update id="updateByMap" parameterType="Map">
		 update lq_user 
		    <set>
		    	<include refid="setComn"/>
			</set>
		  where id = #{id}
	</update>
	
	
	<delete id="delete">
		delete from lq_user where id = #{id}
	</delete>
	
	<delete id="multiDelete" parameterType="List">
		delete from lq_user
		where id in
		<foreach collection="list" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</delete>
	
	<delete id="deleteByWhere" parameterType="Map">
		delete from lq_user 
		<where>
		    <include refid="whereClause"/>
		</where>
	</delete>	
	
</mapper>    
